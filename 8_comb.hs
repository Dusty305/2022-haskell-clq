plus :: [Int] -> Int 
--функция сложения списка, получающая на вход и возвращающая ---целые значения
plus = foldr (+) 0 
--рекурсивный вызов функции сложения
--с прибавлением к элементу списка нуля

mult :: [Int] -> Int
--функция умножения, получающая на вход и возвращающая 
--целые значения
mult = foldr (*) 1
--рекурсивный вызов функции умножения
--с умножением элемента списка на единицу

cube :: Int -> Int
cube x = x * x * x

mymap :: (a -> b) -> [a] -> [b]
mymap f = foldr((:).f) []

myconcat :: [[a]]->[a] 
myconcat(xs:xss) = xs ++ myconcat xss
--для элементов списка используются объединение
myconcat [] = []
--пустой список остается пустым

myconcatMap :: (a -> [b]) -> [a] -> [b]
--создает список из функции формирования списка путем применения этой функции ко всем элементам в списке, переданном в качестве второго аргумента
myconcatMap f =  foldr ((++) . f) []

main = do
    putStrLn "Result of sum: "
    print(plus([1,2,3,4,5,6,6]))
    putStrLn "Result of multiplication: "
    print(mult([1,2,3,4,5]))
    print(mymap cube[4,3,2,1])
    --на вход принята функция, которая вычисляет значение 
    --b (куб числа) по параметру а (4,3,2,1)
    print(myconcat[[1,2,3],[1,2,3]])
    putStrLn "Result of concat Map: "
    print(myconcatMap (enumFromTo 1) [1,4,7])